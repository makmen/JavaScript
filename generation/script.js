function GenerateSet(objects) {    var limit = 5;    var cards;        generateSet();        this.getCards = function() {        return cards;    }        this.returnSet = function() {        return stringSet;    }        function generateSet() {        var succes = false;        while(!succes) {            cards = [];            for (var i = 0; i < limit; ++i) {                cards.push(new Card());            }            succes = true;            /*if (checkSetRepeat()) {                succes = true;            }*/        }    }        function isCardExist(arr, nominal, suit) {        var position = -1;        for(var i = 0; i < arr.length; i++) {            if (arr[i].nominal() == nominal && arr[i].getSuit()) {                position = i;                break;            }        }                return position;    }        function checkSetRepeat() {        var objectsCards;        for (var i = 0; i < objects.length; ++i) {            objectsCards = objects[i].getCards();            for(var j = 0; j < cards.length; ++j) {                var position = isCardExist(objectsCards, cards[j].nominal(), cards[j].getSuit());                if (position >= 0) {                    objectsCards.splice(position, 1);                } else {                    break;                }            }            if (objectsCards.length == 0) {                return false;             }        }                return true;    }}function Card() {    var suitArray = ['b', 'p', 'k', 'c'];    var stringArray = ['8', '9', '10', 'J', 'D'];    var suit;    var nominalString;    card();        this.nominal = function() {        return nominalString;    }    this.getSuit = function() {        return suit;    }        function card() {        var rnd = getRandomInt(0, 4);        nominalString = stringArray[rnd];        suit = suitArray[getRandomInt(0, 3)];    }        function getRandomInt(min, max) {        return Math.floor(Math.random() * (max - min + 1)) + min;    }}