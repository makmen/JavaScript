function Player(name) {    var scoreGame = 0;    var score = 0;    var cards = [];        this.win = function() {        ++scoreGame;    }    this.getScoreGame = function() {        return scoreGame;    }    this.getName = function() {        return name;    }    this.removeCards = function() {        cards = [];    }    this.addCard = function(card) {        cards.push(card);        score += card.getValue()    }    this.getCard = function() {        return cards;    }    this.getLastCard = function() {        return cards[cards.length-1];    }    this.getScore = function() {        return score;    }    this.setScore = function(scr) {        score = scr;    }}function Game(players) {    var cardDeckCount = 6;      // количество колод 6, по 52 карты в каждой    var allCards = [];    var step = 0;    var winScore = 21;    var cardStepLimit = 202;    // когда в колоде становится меньше  100                                // происходит перетасовка колоды жто происходит на 202    game();    this.checkDeck = function() {        if (step > cardStepLimit) {            allCards = shuffle(allCards);            step = 0;        }    }        function game() {        var deck;        for (var i = 0; i < cardDeckCount; i++ ) {            deck = new CardDeck();            allCards = allCards.concat(deck.getCards());        }        allCards = shuffle(allCards);    }    this.resultWin = function() {        if (players[0].getScore() < winScore) {             if (players[1].getScore() > winScore) {                return players[0];            } else if (players[1].getScore() == winScore) {                return players[1];            } else if (players[0].getScore() > players[1].getScore()) {                return players[0];            } else if (players[0].getScore() < players[1].getScore()) {                return players[1];            } else {                return null;            }        } else if (players[0].getScore() > winScore) { // перебор            if (players[1].getScore() <= winScore) {                return players[1];            }         } else {            if (players[1].getScore() != winScore) {                return players[0];            }         }        return null;    }    this.stepComputer = function(index) {        players[index].setScore(0);        players[index].removeCards();                players[index].addCard(this.nextStep());        players[index].addCard(this.nextStep());                            // предпологается что комп не видит карты,        // он играет пока сумма не больше 17        while (this.continue(players[index])) {            if (players[index].getScore() >= 17) {                break;            }            players[index].addCard(this.nextStep());        }    }    this.nextStep = function() {        return allCards[++step];    }    this.getAllCards = function() {        return allCards;    }    this.continue = function(player) {        var score = player.getScore();        if (score < winScore) {            return true;        } else if (score > winScore) {            return false;        } else {            return false;        }    }    function shuffle(array) {        var len = array.length;        var ret = [];        var rand;        while(ret.length < len) {            rand = getRandomInt(0, array.length - 1);            ret.push( array[rand] );            array.splice(rand, 1);        }        return ret;    }                function getRandomInt(min, max) {        return Math.floor(Math.random() * (max - min + 1)) + min;    }}function CardDeck() {    var suitArray = ['b', 'p', 'k', 'c'];    var stringArray = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'j', 'd', 'k', 'a'];    var cards = [];         // количество карт в каждой колоде 52     cardDeck();        function cardDeck() {        for (var i = 0; i < suitArray.length; i++ ) {            for (var j = 0; j < stringArray.length; j++ ) {                cards.push( new Card(suitArray[i], stringArray[j] ) );            }        }    }        this.getCards = function() {        return cards;    }}function Card(suit, nominal) {    var value;    card();    this.getValue = function() {        return value;    }    this.getNominal = function() {        return nominal;    }    this.getSuit = function() {        return suit;    }    function card() {        var obj = { j: 2, d: 3, k: 4, a: 11};        value = (nominal in obj) ? obj[nominal] : +nominal;    }}